README for Raspberry Pi Clock
-----------------------------

Overview:
This package displays the current time (via NTP) and current outside temperature (via WeatherUnderground) on an Adafruit 7 segment LED display. Since there is no real time clock involved, the time is only accurate while the Raspberry Pi is powered on and connected to the Internet. It is most accurate when the NTP source has low drift. Time can be displayed in 12 or 24 hour format. Your local zip code can be configured for local temperature. Temperature info is displayed as whole numbers with no rounding in Farenheit. There is a watchdog script ('watchdog.sh') that runs in the background to ensure the clock script is started at boot and also is restarted if it crashes.

Requirements:
- Raspbery Pi (tested on RPi Model B and RPi 2)
- Assembled 7 Segment display w/I2C backpack from Adafruit (ex. https://www.adafruit.com/products/1270)
- Network connectivity on Raspberry Pi
- NTP servers configured on Raspberry Pi (/etc/ntp.conf)
- Local timezone configured on Raspberry Pi (use 'raspi-config')
- Python installed on Raspberry Pi
- I2C enabled on Raspberry Pi (https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c)

Instructions:
1. Update your Raspberry Pi ('sudo apt-get update' followed by 'sudo apt-get upgrade')
2. Install dependency packages ('sudo apt-get install build-essential python-dev python-smbus python-imaging') 
3. Find Python modules directory
	a. From Raspberry Pi CLI, run 'sudo python'
	b. Run 'import os'
	c. Run 'os'
	d. Copy path (ex. '/usr/lib/python2.7/')
	e. CTRL-D
	f. Copy all files in Adafruit-Libraries folder to this location
4. In /usr/bin/ directory, create a new subdirectory called "rpi-clock"
5. Copy 'clear_display.py', 'display_test.py', 'clock.py', and 'clock_test.py' to /usr/bin/rpi-clock/
6. Copy 'watchdog.sh' to home folder
7. Edit the 'zipcode' variable in 'clock.py' file to match local zip code
8. Edit the 'show_weather' variable if you want to see weather info
9. Edit the 'format' variable in 'clock.py' to define 12 hour or 24 hour format
10. Edit the 'brightness' variable in 'clock.py' to adjust how bright the display is.
11. Make the watchdog script executable by running (no quotes) 'sudo chmod +x watchdog.sh'
12. Edit '/etc/rc.local' and add the following line (no quotes) > 'exec /home/<local username>/watchdog.sh --silent &' so the script runs at boot. Be sure to edit the path accordingly based on your username.
13. Shutdown and power off the Raspberry Pi
14. Connect necessary GPIO pins to 7 segment display
15. Boot the Raspberry Pi
